# glip config file
#
# glip is a code checking helper,
# mainly used as git pre-commit hook
# see https://github.com/guibog/glip
#
# There are two main types of code checkers
# registered in glip: blocking and nonblocking
# checkers.
#
# - Errors and strong smells that should not be commited are
#   checked with blocking checkers, eg. pylint -ERROR
#
# - Style checks and milder scents should be checked with
#   nonblocking checkers.
#
# But it is obviously ^2U.

[DEFAULT]
#debug = True
color = True

# Checker dummy is here for testing and explanation
# because everyone has grep. Files with .txt extensions
# will be checked and glip will complain if 'what the'
# is found.
[dummy]
# `command' is any command line, the file paths to be checked
# are appended
command = grep 'what\ the'
# Choose which file extensions to check with `exts'
exts = .txt
# Limit the number of glips displayed per checker with `maxlines'
maxlines = 20
# When `showstderr' is set to true, anything received in stderr
# will be displayed on the teletype.
showstderr = True
# Globs can be ignored with `ignore'
ignore = ignoreall*
#
# WARNING! After you played with [dummy], you should comment or yank it out.


# Uncomment any of the blocks below if you have one of these tools
#
#[pep8]
#command = pep8 -r --ignore=E302,E261,E501
#exts = .py
#blocking = False
#showstderr = True
#
#[pylint]
#command = pylint -rn -f parseable -iy
#exts = .py
#maxlines = 20
#showstderr = False
#
#[pylint-error]
#command = pylint -E -rn -iy -f parseable -d E1103
#exts = .py
#blocking = True
#showstderr = False
#color = red
#
#[jshint]
#command = jshint
#exts = .js .html
#ignore = public/js/dist*
